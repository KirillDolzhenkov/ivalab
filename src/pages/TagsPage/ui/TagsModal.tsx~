import { memo, useCallback, useEffect } from 'react';
import { Button, Form, Input, Modal, Select } from 'antd';
import { ITag } from '@/pages/TagsPage/model/tagsSlice';
import styles from './TagModal.module.less';

interface TagModalProps {
    isOpen: boolean;
    onClose: () => void;
    onSubmit: (values: ITag) => void;
    initialData: ITag | null;
}

const colorOptions = [
    'red', 'blue', 'green', 'yellow', 'purple', 'orange'
]; // Предустановленные цвета

export const TagModal = memo((props: TagModalProps) => {
    const { isOpen, onClose, onSubmit, initialData } = props;
    const [form] = Form.useForm();

    useEffect(() => {
        if (initialData) {
            form.setFieldsValue(initialData);
        }
    }, [initialData, form]);

    const handleFormSubmit = useCallback(async () => {
        try {
            const values = await form.validateFields();
            onSubmit(values);
            onClose();
        } catch (error) {
            console.error('Ошибка валидации формы:', error);
        }
    }, [form, onSubmit, onClose]);

    return (
        <Modal title="Информация о теге" open={isOpen} onCancel={onClose} footer={null}>
            <Form form={form} layout="vertical">
                <Form.Item
                    name="name"
                    label="Название"
                    rules={[{ required: true, message: 'Пожалуйста, введите название!' }]}
                >
                    <Input />
                </Form.Item>

                <Form.Item
                    name="color"
                    label="Цвет"
                    rules={[{ required: true, message: 'Пожалуйста, выберите цвет!' }]}
                >
                    <Select placeholder="Выберите цвет">
                        {colorOptions.map((color) => (
                            <Select.Option key={color} value={color}>
                                <span style={{ color }}>{color}</span>
                            </Select.Option>
                        ))}
                    </Select>
                </Form.Item>

                <div className={styles.submitButtonWrapper}>
                    <Button type="default" onClick={handleFormSubmit}>
                        Сохранить
                    </Button>
                </div>
            </Form>
        </Modal>
    );
});
